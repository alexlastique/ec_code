<!DOCTYPE html>
<html class="h-full" data-theme="true" data-theme-mode="light" dir="ltr" lang="fr">
    <head>
        <title>BookMaster</title>
        <meta charset="utf-8"/>
        <meta content="follow, index" name="robots"/>
        <meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport"/>
        <meta content="" name="description"/>
        <link href="{{ asset('media/icon.png') }}" rel="shortcut icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet"/>
        <link href="{{ asset('metronic/vendors/apexcharts/apexcharts.css') }}" rel="stylesheet"/>
        <link href="{{ asset('metronic/vendors/keenicons/styles.bundle.css') }}" rel="stylesheet"/>
        <link href="{{ asset('metronic/css/styles.css') }}" rel="stylesheet"/>
    </head>
    <body class="antialiased flex h-full text-base text-gray-700 [--tw-page-bg:#F6F6F9] [--tw-page-bg-dark:var(--tw-coal-200)]
            [--tw-content-bg:var(--tw-light)] [--tw-content-bg-dark:var(--tw-coal-500)] [--tw-content-scrollbar-color:#e8e8e8]
            [--tw-header-height:60px] [--tw-sidebar-width:90px] bg-[--tw-page-bg] dark:bg-[--tw-page-bg-dark]">
        <!-- Theme Mode -->
        <script>
                const defaultThemeMode = 'light'; // light|dark|system
                let themeMode;
                if ( document.documentElement ) {
                    if ( localStorage.getItem('theme') ) {
                        themeMode = localStorage.getItem('theme');
                    } else if ( document.documentElement.hasAttribute('data-theme-mode') ) {
                        themeMode = document.documentElement.getAttribute('data-theme-mode');
                    } else {themeMode = defaultThemeMode;}

                    if ( themeMode === 'system' ) {themeMode = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';}
                    document.documentElement.classList.add(themeMode);
                }
        </script>
        <!-- End of Theme Mode -->

        <!-- Page -->
        <!-- Base -->
        <div class="flex grow">
            <!-- Header -->
            {% include 'components/main/header.html.twig' %}
            <!-- End of Header -->

            <!-- Wrapper -->
            <div class="flex flex-col lg:flex-row grow pt-[--tw-header-height] lg:pt-0">
                <!-- Sidebar -->
                {% include 'components/main/sidebar.html.twig' %}
                <!-- End of Sidebar -->

                <!-- Main -->
                <div class="flex flex-col grow rounded-xl bg-[--tw-content-bg] dark:bg-[--tw-content-bg-dark] border border-gray-300 dark:border-gray-200 lg:ms-[--tw-sidebar-width] mt-0 lg:mt-5 m-5">
                    <div class="flex flex-col grow lg:scrollable-y-auto lg:[scrollbar-width:auto] lg:light:[--tw-scrollbar-thumb-color:var(--tw-content-scrollbar-color)] pt-5"
                        id="scrollable_content">
                        <main class="grow" role="content">
                            <!-- Toolbar -->
                            {% include 'components/main/toolbar.html.twig' %}
                            <!-- End of Toolbar -->
                            <!-- Container -->
                            <div class="container-fixed">


                                <table>
                                    <thead>
                                        <tr>
                                            <th>Favorie</th>
                                            <th>Livre</th>
                                            <th>Cat√©gorie</th>
                                            <th>Utilisateur</th>
                                            <th>Notes</th>
                                            <th>Description</th>
                                            <th>Date</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {% for book in books %}
                                            <tr onclick="toggleComment({{ book.id }})">
                                                <td id="favorite{{ book.id }}" onclick="toggleFavorite('{{ book.id }}', event)">{{ book.heart }}</td>
                                                <td>{{ book.name }}</td>
                                                <td>{{ book.category }}</td>
                                                <td>{{ book.user }}</td>
                                                <td>{{ book.rating }}</td>
                                                <td>{{ book.description }}</td>
                                                <td>{{ book.date|date('d/m/Y') }}</td>
                                            </tr>
                                        {% endfor %}
                                    </tbody>
                                </table>


                            </div>
                            <!-- End of Container -->
                        </main>
                    </div>
                    <!-- Footer -->
                    {% include 'components/main/footer.html.twig' %}
                    <!-- End of Footer -->
                </div>
                <!-- End of Main -->
            </div>
            <!-- End of Wrapper -->
        </div>
        <!-- End of Base -->
        {# modal qui permet de mettre des commentaire #}
        {% include 'modals/commentaire.html.twig' %}

        <!-- End of Page -->

        <!-- Scripts -->
        <script src="{{ asset('metronic/js/core.bundle.js') }}"></script>
        <script src="{{ asset('metronic/vendors/apexcharts/apexcharts.min.js') }}"></script>
        <script src="{{ asset('metronic/js/widgets/general.js') }}"></script>

        <script>

            function toggleFavorite(bookName, event) {
                event.stopPropagation(); // Emp√™che le clic de se propager √† la ligne
                const book = document.getElementById("favorite" + bookName);
                var heart = book.innerHTML === "üñ§" ? true : false;
                book.innerHTML = heart ? "‚ù§Ô∏è" : "üñ§";
                fetch('{{ path('app.favorite') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title: bookName,
                        heart: heart,
                    })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.ok) {
                            console.log('Book favorite status updated successfully');
                        } else {
                            console.error('Error updating book favorite status:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error.message);
                    });
            }

            function toggleComment(bookId) {
                const modal = document.getElementById('commentModal');
                const modalContent = document.getElementById('modalContent');
                const coment = document.getElementById('coment');
                coment.innerHTML = "";
                document.getElementById('commentInput').value = "";
                document.getElementById('bookId').value = bookId;
                
                fetch('{{ path('app.getComment') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        bookId: bookId,
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.ok) {

                        data["comments"].forEach(comment => {
                            let commentDiv = document.createElement("div");
                            commentDiv.innerHTML = `${comment["user"]} a comment√© : ${comment["comment"]}`;
                            coment.appendChild(commentDiv);
                        });

                    } else {
                        alert(data);
                    }
                })
                .catch(error => {
                    console.error('Erreur :', error.message);
                });

                modal.style.display = 'block';
            }

            function closeModal() {
                const modal = document.getElementById('commentModal');
                modal.style.display = 'none';
            }

            document.getElementById('formCommentaire').addEventListener("submit",function(event) {
                event.preventDefault();
                const commentaire = document.getElementById('commentInput').value;
                const bookId = document.getElementById('bookId').value;

                fetch('{{ path('app.comment') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        commentaire: commentaire,
                        bookId: bookId,
                    })
                })
            })

        </script>
        <!-- End of Scripts -->
    </body>
</html>
